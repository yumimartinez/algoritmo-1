#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include<windows.h>
#include <math.h>
#include <iomanip>
#include <cmath>
# define final 1
#define N 50
#define MAX 100

//ESTRUCTURAS
struct producto
{
	int IdProd;
	char nombre[30];
	int stock;
	float precio;
	char estado;
};
struct cliente 
{
	int IdCliente;
	char nombre[30];
	char NIT;
	char email[30];
	char estado;
};
struct vendedor
{
	int IdVendedor;
	char nombre[30];
	char telefono[15];
	char email[30];
	char estado;
};
struct automovil
{
	int IdAuto;
	char placa[12];
	int IdCliente;
	char estado;
};
struct bomba
{
	int IdBomba;
	char descripcion[12];
	int IdProd;
	int IdVendedor;
	char estado;
};
struct compra
{
	int IdCompra;
	char fecha[10];
	int cantidad;
	int IdProd;
	char estado;
};
struct venta
{
	int IdVenta;
	char fecha[10];
	int cantidad;
	float precioUnitario;
	int IdBomba;
	int IdAuto;
	int IdProd;
	char estado;
};

using namespace std;

//CARATULA
void cargar_letra(char logo[][MAX], char c, int pos, int &width)
{
	char b = '#';
	switch (c)
	{
		case 'u':
			width = 4;
			logo[0][pos] = b;
			logo[1][pos] = b;
			logo[2][pos] = b;
			logo[3][pos] = b;

			logo[4][pos] = b;
			logo[4][pos + 1] = b;
			logo[4][pos + 2] = b;


			logo[4][pos + 3] = b;

			logo[0][pos + 3] = b;
			logo[1][pos + 3] = b;
			logo[2][pos + 3] = b;
			logo[3][pos + 3] = b;
			break;

		case 'p':
			width = 4;
			logo[0][pos] = b;
			logo[1][pos] = b;
			logo[2][pos] = b;
			logo[3][pos] = b;
			logo[4][pos] = b;

			logo[0][pos + 1] = b;
			logo[0][pos + 2] = b;
			logo[2][pos + 1] = b;
			logo[2][pos + 2] = b;

			logo[0][pos + 3] = b;
			logo[1][pos + 3] = b;
			logo[2][pos + 3] = b;
			break;
		
		case 's':
			width = 3;
			logo[0][pos] = b;
			logo[0][pos + 1] = b;
			logo[0][pos + 2] = b;
			logo[0][pos + 3] = b;
			
			logo[2][pos] = b;
			logo[2][pos + 1] = b;
			logo[2][pos + 2] = b;
			logo[2][pos + 3] = b;

			logo[4][pos] = b;
			logo[4][pos + 1] = b;
			logo[4][pos + 2] = b;
			logo[4][pos + 3] = b;

			logo[1][pos] = b;
			logo[3][pos + 3] = b;

			break;

		case 'a':
			width = 4;
			logo[0][pos] = b;
			logo[1][pos] = b;
			logo[2][pos] = b;
			logo[3][pos] = b;
			logo[4][pos] = b;

			logo[0][pos + 3] = b;
			logo[1][pos + 3] = b;
			logo[2][pos + 3] = b;
			logo[3][pos + 3] = b;
			logo[4][pos + 3] = b;

			logo[0][pos + 1] = b;
			logo[0][pos + 2] = b;
			logo[2][pos + 1] = b;
			logo[2][pos + 2] = b;

			break;
	}
	width +=4 ; // para darle espacio entre letras.
}
void mostrar(char mat[][MAX] , int n, int m)
{
	for	(int i = 0; i < n; i++)
	{
		for	(int j = 0; j < m; j++)
		{
			cout << mat[i][j];
		}
		cout << endl;
	}
}
void cargar_logo(char logo[][MAX], char pal[])
{
	int pos = 40, width;

	for	(int i = 0; i < (int)strlen(pal); i++)
	{
		cargar_letra(logo, pal[i], pos, width);
		pos += width;
	}
}
void caratula()
{
	char logo[10][MAX];
	char barra[MAX][MAX];

	memset(logo,' ', sizeof(logo));
	cargar_logo(logo, "upsa");
	
	mostrar(logo, 5, 100);
}

//ARCHIVOS 
void archivo_producto (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("producto.dat", "ab");
	fclose(ptr);
}
void archivo_cliente (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("cliente.dat", "ab");
	fclose (ptr);
}
void archivo_vendedor (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("vendedor.dat", "ab");
	fclose (ptr);
}
void archivo_automovil (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("automovil.dat", "ab");
	fclose (ptr);
}
void archivo_bomba (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("bomba.dat", "ab");
	fclose (ptr);
}
void archivo_compra (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("compra.dat","ab");
	fclose (ptr);
}
void archivo_venta  (char nomArchivo[])
{
	FILE*ptr;
	ptr=fopen("venta.dat", "ab");
	fclose (ptr);
}

//VALIDACIONES
bool VerifSoloNumeros(char cad[])
{
	int i;
	bool k;
	k=true;
	i=0; 
	while(i<strlen(cad)&&k==true)
	{
		if(cad[i]>='0'&& cad[i]<='9')
		{
			i++;
		}
		else
		{
			k=false;
		}
	}
	if(strlen(cad)==0)
	{
		k=false;
	}
	return(k);

}
bool VerifSoloLetras(char cad[])
{
	int i;
	bool k;
	k=true;
	i=0; 
	while(i<strlen(cad)&&k==true)
	{
		if(isalpha(cad[i])!=0 || cad[i]==' ')
		{
			i++;
		}
		else
		{
			k=false;
		}
		if(cad[0]==' ')
		{
			k=false;
		}
	}
	return(k);
}
bool validar_email(char cad[30]) 
{ 
	int n=strlen(cad),i,arr=0,punto=0; 
 	for(i=0;i<n;i++) 
 	{ 
 		if(cad[i]!='@' && cad[i] !='.' && cad[i]!='_'&&cad[i]!='-') 
 			if(cad[i]!=-92 && cad[i]!=-91) 
 				if(!((cad[i]>96 && cad[i]<123) || (cad[i]>64 && cad[i]<91))) 
 					return false; 
 		if(cad[i]=='@') 
 			arr++; 
 		if(cad[i]=='.') 
 			punto++; 
	} 
	if(punto>0) 
 		if(arr==1) 
 			return true; 
	return false; 
} 
bool validar_nombre(char cad[30])
{
	int n=strlen(cad),i;
	for(i=0;i<n;i++)
	{
		if(cad[i]!=' ' && cad[i]!=-92 && cad[i]!=-91)
			if(!((cad[i]>96 && cad[i]<123) || (cad[i]>64 && cad[i]<91)))
				return false;
	}
	return true;
}
bool validar_telefono(char cad[12] )
{int i;
 bool k = true;
 int lon = strlen(cad);
 switch(lon)
	{case 7: i = 0;
			 while(cad[i] != '\0')
			 {if(isdigit(cad[i]) == 0)
					k = false;
					i++;
			 } 
			 break;
	 case 8: i = 0;
			 while(cad[i] != '\0')
			 {if(isdigit(cad[i]) == 0)
					k = false;
					i++;
			 }  
			 break;
	 case 12: i = 1;
			  while(cad[i] != '\0')
			  {if(isdigit(cad[i]) == 0)
					k = false;
					i++;
			  }  
			   if(cad[0] != '+')	
				    k = false;
			  break;
	 default: k = false;
	}
 return(k);
}
int verificarNumero_Placa(char num)
{
	if(num==48|| num==49|| num==50||num==51||num==52||num==53|| num==54||num==55||num==56||num==57)
	{
		return(1);	
	}
	else
	{
		return(0);	
	}
}
int verificarPalabra_Placa (char num)
{  
	if(num==97||num==98||num==99||num==100||num==101||num==102||num==103||num==104||num==105||num==106||num==107||num==108||num==109||num==110||num==111||num==112||num==113||num==114||num==115||num==116||num==117||num==118||num==119||num==120||num==121||num==122)
	{
			 return(1);	
	}
	else
	{
		return(0);	
	}
}
int verificar_placa(char idVehiculo[])
{
	int i,b,c,j,a=0, 
	n=strlen(idVehiculo);
	if(n==7)
    {  
		for(i=0;i<4;i++)
        {
			b=verificarNumero_Placa(idVehiculo[i]);
			if(b==0)
            {
				i=4;
				return(a);
			}
           }
		for(j=4;j<n;j++)
		{ 
			c=verificarPalabra_Placa(idVehiculo[j]);
			if(c==0)
			{ 
				j=n;
				return(a); 
			}
			else
			{
				a=1;
				return(a);
			}
		}
   }
}

//FECHA
void ValidarFecha()
{  
	int d,m,y;
	char dc[N],mc[N],yc[N];
	bool bisiesto = false;  
	do
	{
		cout << "Introduce el dia: ";  
		cin >> dc;
	}while(VerifSoloNumeros(dc)==false);
	do
	{
		cout << "Introduce el mes: ";  
		cin >> mc; 
	}while(VerifSoloNumeros(mc)==false);
	do
	{
		cout << "Introduce el año: ";  
		cin >> yc;
	}while(VerifSoloNumeros(yc)==false);
	d=atoi(dc);
	m=atoi(mc);
	y=atoi(yc);
	//comprobamos si el año es bisiesto  
	if(y%4==0 && y%100!=100 || y%400==0)  
		bisiesto = true;  

	//comprobamos que los datos ingresados esten en un rango valido  
	if(d>0 && d<32 && m>0 && m<13 && y>0){  
		if(m==1 || m==3 || m==5 || m==7 || m==8 || m==10 || m==12)  
		{  
			cout << "\nFecha valida";  
		}  
		else  
		{  
			if(m==2 && d<30 && bisiesto)  
				cout << "\nFecha valida";  
			else if(m==2 && d<29 && !bisiesto)  
				cout << "\nFecha valida";  
			else if(m!=2 && d<31)  
				cout << "\nFecha valida";  
			else  
				cout << "\nFecha no valida";  
		}  
	}  
	else  
		cout << "\nFecha no valida";  
} 
int FechaAño() 
{
	time_t tSac = time(NULL);  // instante actual
	struct tm* pt1 = localtime (&tSac);
	return((pt1->tm_year+1900));

}
int FechaMes()
{
	time_t tSac = time(NULL);  // instante actual

	struct tm* pt1 =localtime (&tSac);
	return((pt1->tm_mon+1));

}
int FechaDia() 
{
	time_t tSac = time(NULL);  // instante actual

	struct tm* pt1 =localtime (&tSac);
	return((pt1->tm_mday));

}
bool validar_fecha(int dia,int mes,int anho)
{
	if(mes>12||mes<0||
		dia>31||dia<0||
		(dia>30 && mes>7 && mes%2 == 1)||
		(dia>30 && mes<7 && (mes%2 == 0))||
		(dia>29 && mes==2 && ((anho%4 == 0) || ((anho%100 > 0) && (anho%400 == 0)) ) ) ||
		(dia>28 && mes==2 && (anho%4 >0) || ( (anho%100 == 0) && (anho%400 > 0)) ) )
	{
		return false;
	}
	else
	{
		return true;
	}
}
bool generar_fecha(char fecha[11])
{
	cout<<"Fecha:";
	gets(fecha);

	bool correcto = true;
	int dia = (fecha[0] - '0')*10 + (fecha[1] - '0');
	int mes = (fecha[3] - '0')*10 + (fecha[4] - '0');
	int anho = (fecha[6] - '0')*1000 + (fecha[7] - '0')*100 + (fecha[8] - '0')*10 + (fecha[9] - '0');
	correcto = validar_fecha(dia,mes,anho);
	return correcto;
}
bool fechamayor(char *f1, char *f2)
{
	char d[3],m[3],a[5],d2[3],m2[3],a2[5];
	bool k=false;
	d[0]=f1[0];d[1]=f1[1];d[2]='\0';
	m[0]=f1[3];m[1]=f1[4];m[2]='\0';
	a[0]=f1[6];a[1]=f1[7];a[2]=f1[8];a[3]=f1[9];a[4]='\0';
	d2[0]=f2[0];d2[1]=f2[1];d2[2]='\0';
	m2[0]=f2[3];m2[1]=f2[4];m2[2]='\0';
	a2[0]=f2[6];a2[1]=f2[7];a2[2]=f2[8];a2[3]=f2[9];a2[4]='\0';
	if(strcmp(a,a2)>0)
	{
		k = true;
	}
	if(strcmp(a,a2)==0)
	{
		if(strcmp(m,m2)>0)
		{
			k=true;
		}
		if(strcmp(m,m2)==0)
		{
			if(strcmp(d,d2)>=0)
			{
				k=true;
			}
		}
	}
	return k;
}
bool fechamenor(char *f1, char *f2)
{
	char d[3],m[3],a[5],d2[3],m2[3],a2[5];
	bool k=false;
	d[0]=f1[0];d[1]=f1[1];d[2]='\0';
	m[0]=f1[3];m[1]=f1[4];m[2]='\0';
	a[0]=f1[6];a[1]=f1[7];a[2]=f1[8];a[3]=f1[9];a[4]='\0';
	d2[0]=f2[0];d2[1]=f2[1];d2[2]='\0';
	m2[0]=f2[3];m2[1]=f2[4];m2[2]='\0';
	a2[0]=f2[6];a2[1]=f2[7];a2[2]=f2[8];a2[3]=f2[9];a2[4]='\0';
	if(strcmp(a,a2)<0)
	{
		k = true;
	}
	if(strcmp(a,a2)==0)
	{
		if(strcmp(m,m2)<0)
		{
			k=true;
		}
		if(strcmp(m,m2)==0)
		{
			if(strcmp(d,d2)<=0)
			{
				k=true;
			}
		}
	}
	return k;
}
bool entrefechas(char *f,char *f1,char *f2)
{
	return (fechamenor(f1,f) && fechamayor(f2,f) );
}
void leer_fechas(char *f1,char *f2)
{
	bool valido;
	do
	{
		do
		{
			valido = true;
			cout<<endl<<"inicio"<<endl;
			if(!generar_fecha(f1))
			{
				cout<<endl<<"error: fecha inicial no valida";
				valido = false;
			}
		}while(!valido);
		do
		{
			valido = true;
			cout<<endl<<"final"<<endl;
			if(!generar_fecha(f2))
			{
				cout<<endl<<"error: fecha final no valida";
				valido = false;
			}
		}while(!valido);
		if(fechamenor(f2,f1))
		{
			cout<<endl<<"error: fecha final menor o igual que fecha inicial";
		}
	}while(fechamenor(f2,f1));
}


//EXISTEN
bool verif_producto(int p)
{
	FILE*ptr;
	producto reg;
	bool k=false;
	ptr=fopen("producto.dat","rb");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdProd==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;
}
bool verif_cliente(int p)
{
	
	cliente reg;
	bool k=false;
	FILE*ptr;
	ptr=fopen("cliente.dat","ab");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdCliente==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;
}
bool verif_vendedor(int p)
{
	FILE*ptr;
	vendedor reg;
	bool k=false;
	ptr=fopen("vendedor.dat","rb");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdVendedor==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;
}
bool verif_automovil(int p)
{
	FILE*ptr;
	automovil reg;
	bool k=false;
	ptr=fopen("automovil.dat","rb");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdAuto==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;

}
bool verif_placa(char p[12])
{
	FILE*ptr;
	automovil reg;
	bool k=false;
	ptr=fopen("automovil.dat","rb");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.placa==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;

}
bool verif_bomba(int p)
{
	FILE*ptr;
	bomba reg;
	bool k=false;
	ptr=fopen("bomba.dat","rb");
	if(ptr=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdBomba==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;

}
bool verif_compra(int p)
{
	FILE*ptr;
	compra reg;
	bool k=false;
	ptr=fopen("compra.dat","rb");
	if(ptr=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdCompra==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! ";
	}
	return k;
}
bool verif_venta(int p)
{
	FILE*ptr;
	venta reg;
	bool k=false;
	ptr=fopen("venta.dat","rb");
	if(ptr=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdVenta==p)
			{
				k=true;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "El archivo no existe!! " ;
	}
	return k;
}

// OBTENER
producto obtener_producto(int p)
{
	FILE*ptr;
	producto reg;	
	ptr=fopen("producto.dat","rb");
	if(ptr != NULL)
	{		
		fread(&reg,sizeof(reg),1,ptr);
		while((feof(ptr) == false) && (reg.IdProd!=p))
		{			
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);			
	}
	else
	{
		cout << "Error!! El archivo no existe. "; 
	}
	return reg;
}
cliente obtener_cliente(int p)
{
	FILE*ptr;
	cliente reg;
	ptr=fopen("cliente.dat","rb");
	if(ptr!=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "Error!! El archivo no existe. ";
	}
	return reg;
}
automovil obtener_auto(int p)
{
	FILE*ptr;
	automovil reg;
	ptr=fopen("automovil.dat","rb");
	if(ptr!=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "Erro!! El archivo no existe. ";
	}
	return reg;
}
bomba obtener_bomba(int p)
{
	FILE*ptr;
	bomba reg;
	ptr=fopen("bomba.dat","rb");
	if(ptr!=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "Error!! El archivo no existe. ";
	}
	return reg;
}
venta obtener_venta(int p)
{
	FILE*ptr;
	venta reg;
	ptr=fopen("venta.dat","rb");
	if(ptr=NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while((feof(ptr)==false)&&(reg.IdVenta!=p))
		{
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "Error!! El archivo no eiste. ";
	}
	return reg;
}
vendedor obtener_vendedor(int p)
{
	FILE*ptr;
	vendedor reg;
	ptr=fopen("vendedor.dat","rb");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while((feof(ptr)==false)&&(reg.IdVendedor!=p))
		{
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "Error!! El archivo no existe. ";
	}
	return reg;
}
producto datos_producto()
{
	int opcion;
	producto reg;
		cout << " PRODUCTOS " << endl;
		cout << " 1. Gasolina Especial " << endl;
		cout << " 2. Gasolina Premium " << endl;
		cout << " 3. Gas " << endl;
		cout << " 4. Diesel " << endl;
		cout << "Ingrese una opcion: "; 
		cin >> opcion;
		switch (opcion)
		{
			case 1: strcpy(reg.nombre,"Gasolina Especial");
				reg.IdProd=1;
				reg.stock=0;
				reg.estado='A';break;
			case 2:strcpy(reg.nombre,"Gasolina Premium");
				reg.IdProd=2;
				reg.stock=0;
				reg.estado='A';break;
			case 3:strcpy(reg.nombre,"Gas");
				reg.IdProd=3;
				reg.stock=0;
				reg.estado='A'; break;
			case 4:strcpy(reg.nombre,"Diesel");
				reg.IdProd=4;
				reg.stock=0;
				reg.estado='A'; break;
		}
	return reg;
}


// AUMENTAR STOCK
void aumenta_stockProducto(int cantidad,int prod)
{
	producto reg;
	FILE *ptr; 
	ptr= fopen("producto.dat","r+b");
	if(ptr!=NULL)
	{ 
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdProd == prod)
			{
				reg.stock= reg.stock + cantidad;
				fseek(ptr,(-1)*sizeof(reg),SEEK_CUR);
				fwrite(&reg,sizeof(reg),1,ptr);
				break;
			}
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout <<"El Archivo no existe";
	}
}
bool reducir_stockProducto(int cantidad, int prod)
{
	FILE*ptr;
	producto reg;
	bool k=true;
	ptr=fopen("producto.dat","r+b");
	if(ptr==NULL)
	{
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.IdProd==prod)
			{
				reg.stock= reg.stock - cantidad;
				if(reg.stock < 0)
				{
					k = false;
					cout<<endl<<"error: insuficiente stock"<<endl;
					break;
				}
				fseek(ptr,sizeof(reg)*(-1),SEEK_CUR);
				fwrite(&reg,sizeof(reg),1,ptr);
				break;
			}
			fread(&reg,sizeof(reg),1,ptr);
		
		}
		fclose(ptr);
	}
	else
	{
		cout << "EL archivo no existe! ";
	}
	return k;

}

// AÑADIR
void producto_datos ()
{	
	
	FILE*ptr;
	producto reg;
	ptr=fopen("producto.dat","ab");
	reg=datos_producto();
	fwrite (&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}
void cliente_datos()
{
	FILE*ptr;
	cliente reg;
	cout << endl;

	do
	{
	cout << "ID cliente: ";
	cin >> reg.IdCliente;
	}while (reg.IdCliente<99);
	cout << "Nombre: ";
	do
	{
		do
		{
			gets (reg.nombre);
		}while (strlen(reg.nombre)==0);
	}while(validar_nombre(reg.nombre)==false);
	
	cout << "NIT: ";
	cin >> reg.NIT;

	cout << "E-mail: ";
	do
	{
		do
		{
			gets(reg.email);
		}while(strlen(reg.email)==0);
	}while(validar_email(reg.email)==false);
	reg.estado='A';

	ptr=fopen("cliente.dat","ab");
	fwrite (&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}
void vendedor_datos()
{
	FILE*ptr;
	vendedor reg;
	cout << endl;
	do
	{
	cout << "ID vendedor: ";
	cin >> reg.IdVendedor;
	}while (reg.IdVendedor<0);
	cout << "Nombre: ";
	do
	{
		do
		{
			gets (reg.nombre);
		}while(strlen(reg.nombre)==0);
	}while (validar_nombre(reg.nombre)==false);
	cout << "Telefono: ";
	do
	{
		do
		{
			gets(reg.telefono);
		}while(validar_telefono(reg.telefono)==false);
	}while(VerifSoloNumeros(reg.telefono)==false);
	cout << "E-mail: ";
	do
	{
		cin >> reg.email;
	}while (validar_email(reg.email)==false);
	reg.estado='A';
	ptr=fopen("vendedor.dat", "ab");
	fwrite (&reg, sizeof(reg),1,ptr);
	fclose (ptr);
}
void placa(char cad[6])
{
	int i,n;
	bool k;
	do
	{
		do
		{
			do
			{
				cout<<endl<<"Placa: ";
				gets(cad);
				if(strlen(cad)==5)
				{
					k=true;
				}
				else
				{
					if(strlen(cad)==6)
					{
						k=true;
					}
					else
					{
						if(strlen(cad)==7)
						{
							k=true;
						}
						else
						{
							k=false;
						}
					}
				}
			}while(k==false);
			i=strlen(cad)-3;

			while(i<strlen(cad) && k==true)
			{
				cad[i]=toupper(cad[i]);
				if(cad[i]>=char(65) && cad[i]<=char(90))
				{
					i++;
				}
				else
				{
					k=false;
				}
			}


		}while(k==false);
		k=true;
		i=0;

		while(i<strlen(cad)-3 && k==true)
		{
			if(cad[i]>=char(48) && cad[i]<=char(57)) 
			{
				i++;
			}
			else
			{
				k=false;
			}
		}

	}while(k==false);



	cout<<"Placa: "<<cad;
}
void automovil_datos()
{
	FILE*ptr;
	automovil reg;
	cout << endl;
	do
	{
	cout << "ID automovil: ";
	cin >> reg.IdAuto;
	}while(reg.IdAuto<0);
	placa(reg.placa);
	do
	{
	cout << "ID cliente: ";
	cin >> reg.IdCliente;
	}while(reg.placa<0);
	reg.estado='A';
	ptr=fopen("automovil.dat","ab");
	fwrite(&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}
//ID
int ID_vendedor()
{
	int n;
	char cad[N],op;
	bool k;
	do
	{
		k=true;
		do
		{
			do
			{
				cout<<endl<<"Ingresar Id del Vendedor: ";
				gets(cad); 
			}while(strlen(cad)==0);
		}while(VerifSoloNumeros(cad)==false);
		n=atoi(cad);
		if(verif_vendedor(n)==false)
		{
			cout<<"Id Vendedor "<<n<<" no existe: " << endl;
			cout<< "desea registrar nuevo vendedor? <s/n> ";
			cin >> op;
			if((op=='S')||(op=='s'))
			{
				vendedor_datos();
			}
			k=false;
		}
	}while(k==false);
	return(n);
}
int ID_producto()
{
	int n;
	char cad[N],op;
	bool k;
	do
	{
		k=true;
		do
		{
			do
			{
				cout<<endl<<"Ingresar Id del producto: ";
				gets(cad); 
			}while(strlen(cad)==0);
		}while(VerifSoloNumeros(cad)==false);
		n=atoi(cad);
		if(verif_producto(n)==false)
		{
			cout<<"Id producto "<<n<<" no existe: " <<endl;
			cout<< "Desea registrar nuevo producto? <s/n> ";
			cin >> op;
			if((op=='S')||(op=='s'))
			{
				producto_datos();
			}
			k=false;
		}
	}while(k==false);
	return n;
}
int ID_prod()
{
	int op;
	char p[2];
	bool k;
	do
	{
		cout<<endl<<"Ingrese un producto: ";
		
			cout<<endl<<"1. Gasolina Especial";
		
		if(verif_producto(2)==true)
		{
			cout<<endl<<"2. Gasolina Premium";
		}
		if(verif_producto(3)==true)
		{
			cout<<endl<<"3. Diesel";
		}
		if(verif_producto(4)==true)
		{
			cout<<endl<<"4. Gas";
		}
		cout<<endl<<"Seleccione: ";

		do
		{ 
			gets(p);

		}while(strlen(p)==0);

		if(VerifSoloNumeros(p)==false || verif_producto( atoi(p) )==true) //atoi:convierte una cadena en su valor numerico (entero)
		{
			k=true;
		}

	}while(k=false);
	op=atoi(p);
	return(op);
}

void bomba_datos ()
{
	FILE*ptr;
	bomba reg;
	do
	{
	cout <<"ID bomba: ";
	cin >> reg.IdBomba;
	}while(reg.IdBomba<0);
	cout << "Descripcion: ";
	cin >> reg.descripcion;
	reg.IdVendedor=ID_vendedor();
	reg.IdProd=ID_producto();
	reg.estado ='A';
	ptr=fopen("bomba.dat","ab");
	fwrite(&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}
void compra_datos()
{
	FILE*ptr;
	compra reg;
	cout << endl;
	do
	{
	cout << "ID compra: ";
	cin >> reg.IdCompra;
	}while (reg.IdCompra<0);
	cout << "Fecha: ";
	cin >> reg.fecha;
	do
	{
	cout << "Cantidad: ";
	cin >> reg.cantidad;
	}while (reg.cantidad<0);
	reg.IdProd=ID_prod();
	aumenta_stockProducto(reg.cantidad,reg.IdProd);
	reg.IdProd='A';
	ptr=fopen("compra.dat","ab");
	fwrite(&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}
void venta_datos()
{
	FILE*ptr;
	venta reg;
	cout << endl;
	do
	{
	cout << "ID venta: ";
	cin >> reg.IdVenta;
	}while(reg.IdVenta<0);
	cout << "Fecha: ";
	cin >> reg.fecha;
	do
	{
		do
		{
			cout << "Cantidad: ";
			cin >> reg.cantidad;
		}while (reg.cantidad<0);
	}while(reducir_stockProducto(reg.cantidad,reg.IdProd)==false);
	do
	{
		cout << "Precio unitario: ";
		cin >> reg.precioUnitario;
	}while (reg.precioUnitario<0);
	
	cout << "ID bomba: ";
	do
	{
		cin >> reg.IdBomba;
	}while (verif_bomba(reg.IdBomba)==false);
	do
	{
	cout << "Id auto: ";
	do
	{
		cin >> reg.IdAuto;
	}while(verif_automovil(reg.IdAuto)==false);
	}while (reg.IdAuto<0);
	reg.estado='A';
	ptr= fopen("venta.dat","ab");
	fwrite (&reg,sizeof(reg),1,ptr);
	fclose (ptr);
}

// BORRAR
void producto_borrar ()
{
	FILE *ptr;
	int pro,op;
	producto reg;
		cout << "Ingrese el ID del producto que desea eliminar: ";
		cin >> pro;
		ptr=fopen("producto.dat","r+b");
		if(ptr!=NULL)
		{
			fread (&reg,sizeof(reg),1,ptr);
			while (feof(ptr)==false)
			{

				if (pro==reg.IdProd)
				{
					cout << "Desea eliminar este producto? <s/n> ";
					cin >> op;
					if(op=='s')
					{
					fseek(ptr,sizeof(reg),SEEK_CUR);
					reg.estado='E';
					fwrite(&reg,sizeof(reg),1,ptr);
					}
				}
				fread (&reg,sizeof(reg),1,ptr);
			}
			fclose (ptr);
		}
}
void cliente_borrar ()
{
	FILE*ptr;
	int cli,k=0;
	cliente clie;
	do
	{
		cout << "Ingrese el ID del cliente: ";
		cin >> cli;
		ptr=fopen("cliente.dat","r+b");
		if (ptr!=NULL)
		{
			while (feof(ptr)==false)
			{
				fread (&clie, sizeof(clie), 1,ptr);

					if (clie.IdCliente==cli)
					{
						clie.estado='E';
						fwrite(&clie,sizeof(clie),1,ptr);
						k=1;
					}
				}
			}

		fclose (ptr);
		if (k==0)
		{
			cout << "El ID del cliente no existe ";
		}
	}while (k==0);
}
void vendedor_borrar()
{
	FILE*ptr;
	int ven,k=0;
	vendedor vend;
	do
	{
		cout << "Ingrese el ID del vendedor: ";
		cin >> ven;
		if (ptr!=0)
		{
			while (feof(ptr)==false)
			{
				fread (&vend,sizeof(vend),1,ptr);
				if (vend.IdVendedor==ven)
				{
					vend.estado='E';
					fwrite (&vend,sizeof(vend),1,ptr);
					k=1;
				}
			}
		}
		fclose(ptr);
		if(k==0)
		{
			cout << "El ID del vendedor no existe ";
		}
	}while (k==0);
}
void automovil_borrar ()
{
	FILE*ptr;
	int aut,k=0;
	automovil autom;
	do
	{
		cout << "Ingrese el ID del automovil: ";
		cin >> aut;
		ptr=fopen("automovil.dat","r+b");
		if(ptr!=NULL)
		{
			while (feof(ptr)==false)
			{
				fread(&autom, sizeof(autom),1,ptr);
				if (autom.IdAuto == aut)
				{
					autom.estado='E';
					fwrite (&autom,sizeof(autom),1,ptr);
					k=1;
				}
			}
		}
		fclose(ptr);
		if(k=0)
		{
			cout << "El ID del automovil no existe ";
		}
	} while (k==0);
}
void bomba_borrar()
{
	FILE*ptr;
	int bo,k=0;
	bomba bom;
	do
	{
		cout << "Ingrese el ID de la bomba: ";
		cin >> bo;
		ptr=fopen("bomba.dat","r+b");
		if (ptr!=NULL)
		{
			while(feof(ptr)==false)
			{
				fread(&bom,sizeof(bom),1,ptr);
				if (bom.IdBomba==bo)
				{
					bom.estado='E';
					fwrite(&bom,sizeof(bom),1,ptr);
					k=1;
				}
			}
		}
		fclose(ptr);
		if(k==0)
		{
			cout << "El ID de la bomba no existe ";
		}
	} while (k==0);
}
void compra_borrar ()
{
	FILE*ptr;
	int com, k=0;
	compra comp;
	do
	{
		cout << "Ingrese el ID de la compra: ";
		cin >> com;
		if (ptr!=0)
		{
			while (feof(ptr)==false)
			{
				fread(&comp,sizeof(comp),1,ptr);
				if (comp.IdCompra==com)
				{
					comp.estado='E';
					fwrite(&comp,sizeof(comp),1,ptr);
					k=1;
				}
			}
		}
		fclose (ptr);
		if(k==0)
		{
			cout << "El ID de la compra no existe ";
		}
	}while (k==0);
}
void venta_borrar()
{
	FILE*ptr;
	int ven, k=0;
	venta vent;

	do{
		cout << "Ingrese el ID de venta que desea eliminar: ";
		cin >> ven;
		ptr= fopen ("venta.dat","r+b");
		if(ptr!=NULL)
		{
			while (feof(ptr)==false)
			{
				fread(&vent,sizeof(vent),1,ptr);
				if (vent.IdVenta)
				{
					vent.estado='E';
					fwrite(&vent,sizeof(vent),1,ptr);
					k=1;
				}
			}
		}
		fclose(ptr);
		if(k==0)
		{
			cout << "El ID de la venta no esxiste ";
		}
	}while(k==0);
}

//ELIMINAR
void producto_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	producto reg;
	ptr=fopen("producto.dat","r+b"); 
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdProd << "		" << reg.nombre <<"			"<< reg.stock << "		" << reg.precio << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
	
}
void cliente_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	cliente reg;
	ptr=fopen("cliente.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fwrite(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado='A')
			{
				cout << reg.IdCliente <<"		" << reg.nombre << "		" << reg.NIT << "		" << reg.estado << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void vendedor_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	vendedor reg;
	ptr=fopen("vendedor.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdVendedor << "		" << reg.nombre << "		" << reg.telefono << "		" << reg.email << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if ((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}

}
void automovil_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	automovil reg;
	ptr=fopen("automovil.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdAuto << "		" << reg.placa << "		" << reg.IdCliente << endl;
				cout << "Desea eliminar esta registro? <s/n> ";
				cin >> op;
				if((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void bomba_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	bomba reg;
	ptr=fopen("bomba.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(ptr),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdBomba << "		" << reg.descripcion << "		" << reg.IdProd << "		" << reg.IdVendedor << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >>op;
				if ((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void compra_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	compra reg;
	ptr=fopen("compra.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(ptr),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdCompra << "		" << reg.fecha << "		" << reg.cantidad << "		" << reg.IdProd << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(ptr),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void venta_eliminar(int nroReg)
{
	FILE*ptr;
	char op;
	venta reg;
	ptr=fopen("venta.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdVenta << "		" << reg.fecha << "		" << reg.cantidad << "		" << reg.precioUnitario << "		" << reg.IdBomba << "		" << reg.IdAuto << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='S')||(op=='s'))
				{
					reg.estado='E';
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}

}

// MOSTRAR
void producto_mostrar()
{
	producto reg;
	int c=0;
	FILE*ptr;
	ptr=fopen("producto.dat", "rb");
	if(ptr!=NULL)
	{
		cout << "\n		PRODUCTOS		" << endl; 
 		cout << "\n-------------------------------------------------------------" << endl; 
 		cout << "\nNro.		IdProd.		Nombre		Stock		Precio	 " << endl; 
 		cout << "\n-------------------------------------------------------------" << endl; 
 		cout << endl; 
		fread(&reg, sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
			c++;
			cout << endl << c << "		" << reg.IdProd << "		" << reg.nombre << "		" << reg.stock << "		" << reg.precio << endl;
			fread(&reg,sizeof(reg),1,ptr);
			}
			else
				fread(&reg,sizeof(reg),1,ptr);
		}
		fclose (ptr);
	}
	else 
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}
}
void cliente_mostrar()
{
	cliente reg;
	int c=0;
	FILE*ptr;
	ptr=fopen("cliente.dat","rb");
	if(ptr!=0)
	{
		cout << "\n		CLIENTE		" << endl; 
 		cout << "\n----------------------------------------------------" << endl; 
 		cout << "\nNro. IdCliente.		Nombre		NIT		E-mail	 " << endl; 
 		cout << "\n----------------------------------------------------" << endl;
		cout << endl;
		fread(&reg, sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			c++;
			cout << endl << c << "	" << reg.IdCliente << "		" << reg.nombre << "	" << reg.NIT << "	" << reg.email << endl;
			fread(&reg, sizeof(reg),1,ptr);
		}
		fclose (ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}
}
void vendedor_mostrar()
{
	vendedor reg;
	int c=0;
	FILE*ptr;
	ptr=fopen("vendedor.dat","rb");
	if(ptr!=NULL)
	{
		cout << "\n		VENDEDOR		" << endl; 
 		cout << "\n------------------------------------------------------" << endl; 
 		cout << "\nNro. IdVendedor.		Nombre		Telefono	E-mail " << endl; 
 		cout << "\n------------------------------------------------------" << endl;
		cout << endl;
		fread(&reg,sizeof(reg),1,ptr);
		while (feof(ptr)==false)
		{
			c++;
			cout << endl << c << "	" << reg.IdVendedor << "	" << reg.nombre << "	" << reg.telefono << "		" << reg.email << endl;
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}
}
void automovil_mostrar()
{
	automovil reg;
	cliente regcliente;
	int c=0;
	FILE*ptr;
	ptr=fopen("automovil.dat", "rb");
	if(ptr!=NULL)
	{
		cout << "\n		AUTOMOVIL		" << endl; 
 		cout << "\n------------------------------------------------------" << endl; 
 		cout << "\nNro. IdAuto.		Placa		IdCliente	 " << endl; 
 		cout << "\n------------------------------------------------------" << endl;
		cout << endl;
		fread(&reg,sizeof(reg),1,ptr);
		while (feof(ptr)==false)
		{
			regcliente=obtener_cliente(reg.IdCliente);
			c++;
			cout << endl << c << "	" << reg.IdAuto << "	" << reg.placa << "		" << regcliente.IdCliente << endl;
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe " << endl;
	}
}
void bomba_mostrar()
{
	bomba reg;
	producto regprod;
	vendedor regvendedor;
	int c=0;
	FILE*ptr;
	ptr=fopen("bomba.dat","rb");
	if(ptr!=NULL)
	{
		cout << "\n		BOMBA		" << endl; 
 		cout << "\n--------------------------------------------------------------" << endl; 
 		cout << "\nNro. IdBomba.		Descripcion		IdProd.		IdVenta " << endl; 
 		cout << "\n--------------------------------------------------------------" << endl;
		cout << endl;
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			regprod=obtener_producto(reg.IdProd);
			regvendedor=obtener_vendedor(reg.IdVendedor);
			c++;
			cout << endl << c << "	" << reg.IdBomba << "	" << reg.descripcion << "	" << regprod.IdProd << "	" <<regvendedor.IdVendedor << endl;
			fread(&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}			
}
void compra_mostrar()
{
	compra reg;
	producto regprod;
	int c=0;
	FILE*ptr;
	ptr=fopen("compra.dat","rb");
	if(ptr!=NULL)
	{
		cout << "\n		COMPRA		" << endl; 
 		cout << "\n--------------------------------------------------------------" << endl; 
 		cout << "\nNro. IdCompra.		Fecha		Cantidad		IdProd. " << endl; 
 		cout << "\n--------------------------------------------------------------" << endl;
		cout << endl;
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			regprod=obtener_producto(reg.IdProd);
			c++;
			cout << endl << c << "	" << reg.IdCompra << "	" << reg.fecha << "		" << reg.cantidad << "		" << regprod.IdProd << endl;
			fread (&reg,sizeof(reg),1,ptr);
		}
		fclose(ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}
}
void venta_mostrar()
{
	venta reg;
	bomba regbomba;
	automovil regauto;
	int c=0;
	FILE*ptr;
	ptr=fopen("venta.dat","rb");
	if(ptr!=NULL)
	{
		cout << "\n		VENTA		" << endl; 
 		cout << "\n---------------------------------------------------------------------------------------------" << endl; 
 		cout << "\nNro. IdVenta.		Fecha		Cantidad		PrecioUnit.		IdBomba			IdAuto." << endl; 
 		cout << "\n----------------------------------------------------------------------------------------------" << endl;
		cout << endl;
		fread(&reg,sizeof(reg),1,ptr);
		while(feof(ptr)==false)
		{
			regbomba=obtener_bomba(reg.IdBomba);
			regauto=obtener_auto(reg.IdAuto);
			c++;
			cout << endl << c << "	" << reg.IdVenta << "	" << reg.fecha << "		" << reg.cantidad << "		" << reg.precioUnitario << "		" << regbomba.IdBomba << "		" << regauto.IdAuto << endl;
			fread (&reg,sizeof(reg),1,ptr);
			}
		fclose(ptr);
	}
	else
	{
		cout << "ERROR!! El archivo no existe. " << endl;
	}
}

// MODIFICAR
void producto_modificar(int nroReg)
{
	FILE*ptr;
	producto reg;
	char op;
	ptr=fopen("producto.dat","r+b");
	if (ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdProd << "		" << reg.nombre << "		" << reg.stock << "		" << reg.precio << endl;
				cout << "Desea modificar este registro? <s/n> ";
				cin >> op;
				if ((op=='s')||(op=='S'))
				{
					do
					{
						cout << "Ingrese el ID del producto: ";
						cin >> reg.IdProd;
					}while(reg.IdProd<99);
					cout << "Ingrese el nombre del producto: ";
					do
					{
						do
						{
							gets(reg.nombre);
						}while(strlen(reg.nombre)==0);
					}while(validar_nombre(reg.nombre)==false);
					do
					{
						cout << "Ingrese el precio: ";
						cin >> reg.precio;
					}while(reg.precio<=0);
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void cliente_modificar(int nroReg)
{
	FILE*ptr;
	cliente reg;
	char op;
	ptr=fopen("cliente.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdCliente << "		" << reg.nombre << "		" << reg.NIT << "		" << reg.email << endl;
				cout << "Desea modificar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID del cliente: ";
					do
					{
						cin >> reg.IdCliente;
					}while(reg.IdCliente<99);
					cout << "Ingrese el nombre del cliente: ";
					do
					{
						do
						{
							gets (reg.nombre);
						}while(strlen(reg.nombre)==0);
					}while (validar_nombre(reg.nombre)==false);
					cout << "Ingrese el NIT: ";
					cin >> reg.NIT;
					cout << "Ingrese el E-mail: ";
					do
					{
						do
						{
							cin >> reg.email;
						}while(strlen(reg.email)==0);
					}while (validar_email(reg.email)==false);
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose (ptr);
	}
}
void vendedor_modificar(int nroReg)
{
	FILE*ptr;
	vendedor reg;
	char op;
	ptr=fopen("vendedor.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdVendedor << "		" << reg.nombre << "		" << reg.telefono << "		" << reg.email << endl;
				cout << "Desea modificar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID del vendedor: ";
					do
					{
						cin >> reg.IdVendedor;
					}while(reg.IdVendedor<99);
					cout << "Ingrese el nombre: ";
					do
					{
						do
						{
							gets(reg.nombre);
						}while(strlen(reg.nombre)==0);
					} while(validar_nombre(reg.nombre)==false);
					cout << "Ingrese el telefono: ";
					do
					{
						cin >> reg.telefono;
					}while(validar_telefono(reg.telefono)==false);
					cout << "Ingrese el E-mail: ";
					do
					{
						cin >> reg.email;
					}while (validar_email(reg.email)==false);
					fseek(ptr,sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void automovil_modificar(int nroReg)
{
	FILE*ptr;
	automovil reg;
	char op;
	ptr=fopen("automovil.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdAuto << "		" << reg.placa << "		" << reg.IdCliente << endl;
				cout << "Desea modificar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID del automovil: ";
					do
					{
						cin >> reg.IdAuto;
					}while(reg.IdAuto<99);
					do
					{
					placa(reg.placa);
					}while(verif_placa(reg.placa)==false);
					cout << "Ingrese el ID del cliente: ";
					do
					{
						do
						{
						cin >> reg.IdCliente;
						}while(reg.IdCliente<99);
					}while(verif_automovil(reg.IdCliente)==false);
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void bomba_modificar(int nroReg)
{
	FILE*ptr;
	bomba reg;
	char op;
	ptr=fopen("bomba.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdBomba << "		" << reg.descripcion << "		" << reg.IdProd << "		" << reg.IdVendedor << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID de la bomba: ";
					cin >> reg.IdBomba;
					cout << "Ingrese la descripcion: ";
					cin >> reg.descripcion;
					reg.IdProd=ID_producto();
					reg.IdVendedor=ID_vendedor();
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}
void compra_modificar(int nroReg)
{
	FILE*ptr;
	compra reg;
	char op;
	ptr=fopen("compra.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdCompra << "		" << reg.fecha << "			" << reg.cantidad << "		" << reg.IdProd << endl;
				cout << "Desea modificar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID de la compra: ";
					cin >> reg.IdCompra;
					cout << "Ingrese la fecha: ";
					cin >> reg.fecha;
					cout << "Ingrese la cantidad: ";
					cin >> reg.cantidad;
					reg.IdProd=ID_prod();
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(reg),1,ptr);;
				}
			}
		}
		fclose(ptr);
	}
}
void venta_modificar(int nroReg)
{
	FILE*ptr;
	venta reg;
	char op;
	ptr=fopen("venta.dat","r+b");
	if(ptr!=NULL)
	{
		fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
		fread(&reg,sizeof(reg),1,ptr);
		if(feof(ptr)==false)
		{
			if(reg.estado=='A')
			{
				cout << reg.IdVenta << "		" << reg.fecha << "		" << reg.cantidad << "		" << reg.precioUnitario << "		" << reg.IdBomba << "		" << reg.IdAuto << endl;
				cout << "Desea eliminar este registro? <s/n> ";
				cin >> op;
				if((op=='s')||(op=='S'))
				{
					cout << "Ingrese el ID de venta: ";
					cin >> reg.IdVenta;
					cout << "Ingrese la fecha: ";
					cin >> reg.fecha;
					cout << "Ingrese el precio unitario: ";
					cin >> reg.precioUnitario;
					cout << "Ingrse el ID de la bomba: ";
					cin >> reg.IdBomba;
					cout << "Ingrese el ID del automovil: ";
					cin >> reg.IdBomba;
					fseek(ptr,(nroReg-1)*sizeof(reg),SEEK_SET);
					fwrite(&reg,sizeof(ptr),1,ptr);
				}
			}
		}
		fclose(ptr);
	}
}

//REPORTE

// MENU
void menu_producto()
{
	int opcion,op,num;
	do
	{
  
		cout << "******* MENÚ PRODUCTO *******" << endl;
		cout << "1. Añadir un producto "  << endl;
		cout << "2. Borrar un producto " << endl;
		cout << "3. Modificar un producto " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cin >> opcion;
		system("cls");
		switch (opcion)
		{
		case 1: producto_datos(); break;
			case 2: 
				cout << "Ingrese el registro del producto que desea eliminar: ";
				cin >> op;
				producto_eliminar(op); break;
			case 3: 
				cout << "Ingrese el registro del producto que desea modificar: ";
				cin >> num;
				producto_modificar(num);break;

			case 4: producto_mostrar(); break;
			default: break; 
				
		}
	}while (opcion!=0);
}
void menu_cliente()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ CLIENTE *******" << endl;
		cout << "1. Añadir un cliente " << endl;
		cout << "2. Borrar un cliente " << endl;
		cout << "3. Modificar un cliente " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese la opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: cliente_datos(); break;
			case 2: 
				cout << "Ingrese el registro del cliente que desea eliminar: ";
				cin >> op;
				cliente_eliminar(op); break;
			case 3: 
				cout << "Ingrese el registro del cliente que desea modificar: ";
				cin >> num;
				cliente_modificar(num); break;
			case 4: cliente_mostrar();break;
			default: break;
		}
	}while(opcion!=0);
}
void menu_vendedor()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ VENDEDOR *******" << endl;
		cout << "1. Añadir un vendedor " << endl;
		cout << "2. Borrar un cliente " << endl;
		cout << "3. Modificar un cliente " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese la opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: vendedor_datos(); break;
			case 2: 
				cout << "Ingrese el registro del cliente que desea eliminar: ";
				cin >> op;
				vendedor_eliminar(op); break;
			case 3:
				cout << "Ingrese el registro del cliente que dese modificar: ";
				cin >> num;
				vendedor_modificar(num);break;
			case 4: vendedor_mostrar();break;
			default: break;
		}
	}while (opcion!=0);
}
void menu_automovil()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ AUTOMOVIL *******" << endl;
		cout << "1. Añadir automovil " << endl;
		cout << "2. Borrar automovil " << endl;
		cout << "3. Modificar automovil " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese una opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: automovil_datos(); break;
			case 2: 
				cout << "Ingrese el registro del automovil que desea eliminar: ";
				cin >> op;
				automovil_eliminar(op); break;
			case 3:
				cout << "Ingrese el registro del autmovil que desea modificar: ";
				cin >> num;
				automovil_modificar(num);break;
			case 4: automovil_mostrar(); break;
			default: break;
		}
	}while (opcion!=0);
}
void menu_bomba()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ BOMBA *******" << endl;
		cout << "1. Añadir una bomba " << endl;
		cout << "2. Borrar una bomba " << endl;
		cout << "3. Modificar una bomba " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese una opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: bomba_datos(); break;
			case 2: 
				cout << "Ingrese el registro de la bomba que desea elimnar: ";
				cin >> op;
				bomba_eliminar(op); break;
			case 3: 
				cout << "Ingrese el registro de la bomb que desea modificar: ";
				cin >> num;
				bomba_modificar(num); break;
			case 4: bomba_mostrar();break;
			default: break;
		}
	}while(opcion!=0);
}
void menu_compra()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ COMPRA *******" << endl;
		cout << "1. Añadir una compra " << endl;
		cout << "2. Borrar una compra " << endl;
		cout << "3. Modificar una compra " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese una opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: compra_datos(); break;
			case 2: 
				cout << "Ingrese el registro de la compra que desea eliminar: ";
				cin >> op;
				compra_eliminar(op); break;
			case 3: 
				cout << "Ingrese el registro de la compra que desea modificar: ";
				cin >> num;
				compra_modificar(num);break;

			case 4: compra_mostrar(); break;
			default: break;
		}
	}while (opcion!=0);
}
void menu_venta()
{
	int opcion,op,num;
	do
	{
		cout << "******* MENÚ VENTA *******" << endl;
		cout << "1. Añadir una venta " << endl;
		cout << "2. Borrar una venta " << endl;
		cout << "3. Modificar una venta " << endl;
		cout << "4. Mostrar " << endl;
		cout << "0. Volver al menú principal " << endl;
		cout << "Ingrese la opcion: " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1: venta_datos(); break;
			case 2: 
				cout << "Ingrese el registro de la venta que desea eliminar: ";
				cin >> op;
				venta_eliminar(op); break;
			case 3: 
				cout << "Ingrese el registro de la venta que desea modificar: ";
				cin >> num;
				venta_modificar(num);break;
			case 4: venta_mostrar();break;
			default: break;
		}
	}while(opcion!=0);
}
void menu_archivos()
{
	int opcion;
	do{
	cout << endl;
	cout << "******* MENÚ ABM *******" << endl;
	cout << "	1. Productos " << endl;
	cout << "	2. Cliente " << endl;
	cout << "	3. Vendedor " << endl;
	cout << "	4. Automovil " << endl;
	cout << "	5. Bomba " << endl;
	cout << "	6. Compra " << endl;
	cout << "	7. Venta " << endl;
	cout << "	0. Salir " << endl;
	cout << "	Ingrese la opcion: ";
	cin >> opcion;
	system ("cls");
		switch (opcion)
		{
			case 1:
				archivo_producto ("producto.dat");
				menu_producto();break;
			case 2:
				archivo_cliente ("cliente.dat");
				menu_cliente(); break;
			case 3:
				archivo_vendedor ("vendedor.dat");
				menu_vendedor(); break;
			case 4:
				archivo_automovil ("automovil.dat");
				menu_automovil(); break;
			case 5:
				archivo_bomba ("bomba.dat");
				menu_bomba(); break;
			case 6:
				archivo_compra ("compra.dat");
				menu_compra(); break;
			case 7:
				archivo_venta ("venta.dat");
				menu_venta(); break;
			default:break;
		}
	}while (opcion!=0);
}
void main()
{
	int opcion;


	cout << endl;
	cout << "	########  #### ######## ##    ## ##     ## ######## ##    ## #### ########   #######  " << endl;
	cout << "	##     ##  ##  ##       ###   ## ##     ## ##       ###   ##  ##  ##     ## ##     ## " << endl;
	cout << "	##     ##  ##  ##       ####  ## ##     ## ##       ####  ##  ##  ##     ## ##     ## " << endl;
	cout << "	########   ##  ######   ## ## ## ##     ## ######   ## ## ##  ##  ##     ## ##     ## " << endl;
	cout << "	##     ##  ##  ##       ##  ####  ##   ##  ##       ##  ####  ##  ##     ## ##     ## " << endl;
	cout << "	##     ##  ##  ##       ##   ###   ## ##   ##       ##   ###  ##  ##     ## ##     ## " << endl;
	cout << "	########  #### ######## ##    ##    ###    ######## ##    ## #### ########   #######  " << endl;
	cout << endl;
	caratula();

	cout << endl; 
	system("pause");
	system ("cls");
						
	do
	{
		cout << "+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+ " << endl;
		cout << "|M|E|N|U| |P|R|R|I|N|C|I|P|A|L| " << endl;
		cout << "+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+ " << endl;
		cout << endl;
		cout << "1. Añadir, Borrar o Modificar los archivos " << endl;
		cout << "2. Reporte de ventas por perdiodo " << endl;
		cout << "3. Reporte de compras por periodo " << endl;
		cout <<	"4. Reporte del cliente con mas compras " << endl;
		cout << "0. Salir " << endl;
		cin >> opcion;
		system("cls");
		switch(opcion)
		{
			case 1:
				menu_archivos(); break;
	
			default:break;
		}
	}while (opcion!=0);
getch();
}

